
import os
import random
import string
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, GETTING_RANGE, GETTING_LIST, GETTING_PASSWORD_LENGTH = range(4)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä:"):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("ü™ô –ú–æ–Ω–µ—Ç–∫–∞", callback_data='coin_flip'), InlineKeyboardButton("üëç –î–∞/–ù–µ—Ç", callback_data='yes_no')],
        [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data='dice_roll'), InlineKeyboardButton("üî¢ –ß–∏—Å–ª–æ", callback_data='random_number')],
        [InlineKeyboardButton("üé® –¶–≤–µ—Ç", callback_data='random_color'), InlineKeyboardButton("ü§î –¶–∏—Ç–∞—Ç–∞", callback_data='random_quote')],
        [InlineKeyboardButton("üí° –§–∞–∫—Ç", callback_data='random_fact'), InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞", callback_data='random_card')],
        [InlineKeyboardButton("üîí –ü–∞—Ä–æ–ª—å", callback_data='password_generator')],
        [InlineKeyboardButton("üîÄ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data='list_choice')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data='list_shuffle')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."""
    await show_main_menu(update, context, text=f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –±–æ—Ç-—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä. –ß–µ–º –∑–∞–π–º–µ–º—Å—è?")
    return CHOOSING

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    choice = query.data

    # –ü—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ
    if choice == 'coin_flip':
        result = random.choice(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô"])
        await query.edit_message_text(text=f"–í—ã–ø–∞–ª–æ: **{result}**", parse_mode='Markdown')
    elif choice == 'yes_no':
        result = random.choice(["–î–∞ üëç", "–ù–µ—Ç üëé"])
        await query.edit_message_text(text=f"–û—Ç–≤–µ—Ç: **{result}**", parse_mode='Markdown')
    elif choice == 'random_color':
        r, g, b = [random.randint(0, 255) for _ in range(3)]
        hex_color = f"#{r:02x}{g:02x}{b:02x}"
        await query.edit_message_text(text=f"–°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç:\nHEX: `{hex_color}`\nRGB: `({r}, {g}, {b})`", parse_mode='Markdown')
    elif choice == 'random_quote':
        quotes = ["–ñ–∏–∑–Ω—å - —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –¥—Ä—É–≥–∏–µ –ø–ª–∞–Ω—ã.", "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ.", "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞."]
        await query.edit_message_text(text=f"–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n> _{random.choice(quotes)}_", parse_mode='Markdown')
    elif choice == 'random_fact':
        facts = ["–£ –º–µ–¥—É–∑ –Ω–µ—Ç –º–æ–∑–≥–∞.", "–°–µ—Ä–¥—Ü–µ —Å–∏–Ω–µ–≥–æ –∫–∏—Ç–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–µ–ª–∏–∫–æ, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø–ª–∞–≤–∞—Ç—å –≤ –µ–≥–æ –∞—Ä—Ç–µ—Ä–∏—è—Ö.", "–ë–∞–Ω–∞–Ω—ã - —ç—Ç–æ —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç."]
        await query.edit_message_text(text=f"–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:\n> _{random.choice(facts)}_", parse_mode='Markdown')
    elif choice == 'random_card':
        suits = ["‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è", "‚ô†Ô∏è"]
        ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
        card = f"{random.choice(ranks)}{random.choice(suits)}"
        await query.edit_message_text(text=f"–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞: **{card}**", parse_mode='Markdown')

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    elif choice == 'dice_roll':
        await show_dice_menu(update, context)
        return CHOOSING # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—Å—Ç–∏
    elif choice == 'random_number':
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–º–∏–Ω –º–∞–∫—Å` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1 100`).")
        return GETTING_RANGE
    elif choice == 'password_generator':
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (—á–∏—Å–ª–æ –æ—Ç 8 –¥–æ 128).")
        return GETTING_PASSWORD_LENGTH
    elif choice == 'list_choice' or choice == 'list_shuffle':
        context.user_data['list_mode'] = choice
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return GETTING_LIST

    # –ü–æ—Å–ª–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    await show_main_menu(update, context, text="–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return CHOOSING

# --- –ú–µ–Ω—é –¥–ª—è –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–æ—Å—Ç–µ–π ---
async def show_dice_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("D4", callback_data='d4'), InlineKeyboardButton("D6", callback_data='d6'), InlineKeyboardButton("D8", callback_data='d8')],
        [InlineKeyboardButton("D10", callback_data='d10'), InlineKeyboardButton("D12", callback_data='d12'), InlineKeyboardButton("D20", callback_data='d20')],
        [InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∫–æ—Å—Ç—å –±—Ä–æ—Å–∏—Ç—å:", reply_markup=reply_markup)

async def dice_roll_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    dice = query.data
    sides = int(dice[1:])
    result = random.randint(1, sides)
    await query.edit_message_text(text=f"–ë—Ä–æ—Å–æ–∫ {dice.upper()}: **{result}**", parse_mode='Markdown')
    await show_main_menu(update, context, text="–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return CHOOSING

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def get_range_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        min_val, max_val = map(int, update.message.text.split())
        if min_val >= max_val:
            await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return GETTING_RANGE
        result = random.randint(min_val, max_val)
        await update.message.reply_text(f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}: **{result}**", parse_mode='Markdown')
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1 100`).")
        return GETTING_RANGE

    await show_main_menu(update, context, text="–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return CHOOSING

async def get_password_length_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        length = int(update.message.text)
        if not 8 <= length <= 128:
            await update.message.reply_text("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 8 –¥–æ 128. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return GETTING_PASSWORD_LENGTH

        chars = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(chars) for _ in range(length))
        await update.message.reply_text(f"–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å:\n`{password}`", parse_mode='Markdown')
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return GETTING_PASSWORD_LENGTH

    await show_main_menu(update, context, text="–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return CHOOSING

async def get_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    items = [item.strip() for item in update.message.text.split('\n') if item.strip()]
    if len(items) < 2:
        await update.message.reply_text("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return GETTING_LIST

    mode = context.user_data.get('list_mode')
    if mode == 'list_choice':
        result = random.choice(items)
        await update.message.reply_text(f"–Ø –≤—ã–±–∏—Ä–∞—é: **{result}**", parse_mode='Markdown')
    elif mode == 'list_shuffle':
        random.shuffle(items)
        result = "\n".join(f"{i+1}. {item}" for i, item in enumerate(items))
        await update.message.reply_text(f"–ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n{result}")

    await show_main_menu(update, context, text="–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return CHOOSING

async def back_to_main_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await show_main_menu(update, context)
    return CHOOSING


def main() -> None:
    if not BOT_TOKEN:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [
                CallbackQueryHandler(main_menu_handler, pattern='^(?!d[468]|d1[02]|d20|back_to_main$).*$'), # –í—Å–µ, –∫—Ä–æ–º–µ –∫–æ—Å—Ç–µ–π –∏ –Ω–∞–∑–∞–¥
                CallbackQueryHandler(dice_roll_handler, pattern='^(d4|d6|d8|d10|d12|d20)$'),
                CallbackQueryHandler(back_to_main_handler, pattern='^back_to_main$')
            ],
            GETTING_RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_range_handler)],
            GETTING_PASSWORD_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password_length_handler)],
            GETTING_LIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_list_handler)],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
