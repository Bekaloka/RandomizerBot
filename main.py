

import os
import random
import string
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext: (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
(MAIN_MENU, GETTING_INPUT, SUB_MENU) = range(3)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü™ô –ú–æ–Ω–µ—Ç–∫–∞", callback_data='coin_flip'), InlineKeyboardButton("üëç –î–∞/–ù–µ—Ç", callback_data='yes_no')],
        [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data='dice_menu'), InlineKeyboardButton("üî¢ –ß–∏—Å–ª–æ", callback_data='random_number')],
        [InlineKeyboardButton("üé® –¶–≤–µ—Ç", callback_data='random_color'), InlineKeyboardButton("üîÆ –®–∞—Ä 8", callback_data='magic_8_ball')],
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞", callback_data='random_card'), InlineKeyboardButton("üîí –ü–∞—Ä–æ–ª—å", callback_data='password_generator')],
        [InlineKeyboardButton("üîÄ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data='list_choice')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data='list_shuffle')],
        [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã", callback_data='team_divider')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç-—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    return MAIN_MENU

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:", reply_markup=get_main_menu_keyboard())
    return MAIN_MENU

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---

async def instant_tools_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    response = ""

    if choice == 'coin_flip':
        response = f"–í—ã–ø–∞–ª–æ: **{random.choice(['–û—Ä—ë–ª ü¶Ö', '–†–µ—à–∫–∞ ü™ô'])}**"
    elif choice == 'yes_no':
        response = f"–û—Ç–≤–µ—Ç: **{random.choice(['–î–∞ üëç', '–ù–µ—Ç üëé'])}**"
    elif choice == 'random_color':
        r, g, b = [random.randint(0, 255) for _ in range(3)]
        hex_color = f"#{r:02x}{g:02x}{b:02x}"
        response = f"–°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç:\n`{hex_color}` | `rgb({r}, {g}, {b})`"
    elif choice == 'random_card':
        suits = ["‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è", "‚ô†Ô∏è"]
        ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
        response = f"–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞: **{random.choice(ranks)}{random.choice(suits)}**"
    elif choice == 'magic_8_ball':
        answers = ["–ë–µ—Å—Å–ø–æ—Ä–Ω–æ", "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ", "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞", "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª", "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ", "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª", "–î–∞", "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å", "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å", "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π", "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ"]
        response = f"üîÆ –®–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç: **{random.choice(answers)}**"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await query.message.reply_text(response, parse_mode='Markdown')
    return MAIN_MENU

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–≤–æ–¥–∞ ---

async def input_request_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    tool = query.data
    context.user_data['tool'] = tool

    prompts = {
        'random_number': "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–º–∏–Ω –º–∞–∫—Å` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1 100`).",
        'password_generator': "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (—á–∏—Å–ª–æ –æ—Ç 8 –¥–æ 128).",
        'list_choice': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
        'list_shuffle': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
        'team_divider': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏), –∞ –∑–∞—Ç–µ–º, —á–µ—Ä–µ–∑ –î–í–ï –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥.",
    }

    await query.edit_message_text(prompts[tool], parse_mode='Markdown')
    return GETTING_INPUT

async def input_process_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ."""
    tool = context.user_data.get('tool')
    text = update.message.text
    response = ""

    try:
        if tool == 'random_number':
            min_val, max_val = map(int, text.split())
            if min_val >= max_val:
                raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.")
            response = f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}: **{random.randint(min_val, max_val)}**"

        elif tool == 'password_generator':
            length = int(text)
            if not 8 <= length <= 128:
                raise ValueError("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 8 –¥–æ 128.")
            chars = string.ascii_letters + string.digits + string.punctuation
            password = ''.join(random.choice(chars) for _ in range(length))
            response = f"–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å:\n`{password}`"

        elif tool in ['list_choice', 'list_shuffle']:
            items = [item.strip() for item in text.split('\n') if item.strip()]
            if len(items) < 2:
                raise ValueError("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ.")
            if tool == 'list_choice':
                response = f"–Ø –≤—ã–±–∏—Ä–∞—é: **{random.choice(items)}**"
            else:
                random.shuffle(items)
                response = "–ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(f"{i+1}. {item}" for i, item in enumerate(items))

        elif tool == 'team_divider':
            parts = text.strip().split('\n\n')
            names = [name.strip() for name in parts[0].split('\n') if name.strip()]
            num_teams = int(parts[1].strip())
            if num_teams <= 1 or num_teams > len(names):
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1 –∏ –Ω–µ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            random.shuffle(names)
            teams = [[] for _ in range(num_teams)]
            for i, name in enumerate(names):
                teams[i % num_teams].append(name)
            result = [f"**–ö–æ–º–∞–Ω–¥–∞ {i + 1}:**\n- " + "\n- ".join(team) for i, team in enumerate(teams)]
            response = "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n" + "\n\n".join(result)

    except (ValueError, IndexError) as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return GETTING_INPUT # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(response, parse_mode='Markdown')
    await start(update, context) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return ConversationHandler.END

# --- –ü–æ–¥–º–µ–Ω—é –¥–ª—è –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–æ—Å—Ç–µ–π ---

async def dice_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–æ—Å—Ç–µ–π."""
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"D{s}", callback_data=f"d{s}") for s in [4, 6, 8]],
        [InlineKeyboardButton(f"D{s}", callback_data=f"d{s}") for s in [10, 12, 20]],
        [InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∫–æ—Å—Ç—å –±—Ä–æ—Å–∏—Ç—å:", reply_markup=keyboard)
    return SUB_MENU

async def dice_roll_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–∏."""
    query = update.callback_query
    await query.answer()
    sides = int(query.data[1:])
    response = f"–ë—Ä–æ—Å–æ–∫ D{sides}: **{random.randint(1, sides)}**"
    await query.message.reply_text(response, parse_mode='Markdown')
    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è –≤ –ø–æ–¥–º–µ–Ω—é –∫–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤
    return SUB_MENU

# --- –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã ---

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await update.message.reply_text("–≠—Ç–æ –±–æ—Ç-—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await start(update, context)
    return ConversationHandler.END

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # –î–∏–∞–ª–æ–≥, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤—Å–µ–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –±–æ—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                CallbackQueryHandler(instant_tools_handler, pattern='^(coin_flip|yes_no|random_color|random_card|magic_8_ball)$'),
                # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                CallbackQueryHandler(input_request_handler, pattern='^(random_number|password_generator|list_choice|list_shuffle|team_divider)$'),
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ–¥–º–µ–Ω—é –∫–æ—Å—Ç–µ–π
                CallbackQueryHandler(dice_menu_handler, pattern='^dice_menu$'),
            ],
            GETTING_INPUT: [
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_process_handler)
            ],
            SUB_MENU: [
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –ø–æ–¥–º–µ–Ω—é (–±—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π)
                CallbackQueryHandler(dice_roll_handler, pattern='^d(4|6|8|10|12|20)$'),
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main$'),
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))

    application.run_polling()

if __name__ == '__main__':
    main()
